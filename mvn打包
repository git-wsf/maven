---maven打包

  mvn clean && mvn -Dmaven.test.skip=true install -Ptest(指定profile)


  mvn clean && mvn -Dmaven.test.skip=true install -Ponline(指定profile)
  
<build>
		<finalName>browsercloud</finalName>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<executions>
					<execution>
						<id>make-a-jar</id>
						<phase>compile</phase>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<!-- not append assembly id in release file name -->
					<appendAssemblyId>false</appendAssemblyId>
					<descriptors>
						<descriptor>assembly.xml</descriptor>
					</descriptors>
				</configuration>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
  
  
  
  
====指定文件
  <profiles>
		<profile>
			<id>test</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<env>test</env>
			</properties>
		</profile>
		<profile>
			<id>online-mumbai</id>
			<properties>
				<env>online-mumbai</env>
			</properties>
		</profile>
	</profiles>
	
	
	

解疑惑----maven中snapshot相关jar无法拉取问题
2018年05月17日 10:36:25
阅读数：283
这段时间maven中经常不能拉取snapshot相关jar的问题一直困扰着，今天把相关解决方案整理下。 
使用的是局域网中的Snaptype Nexus服务器的，maven的setting-main.xml相关配置如下：

<!-- <mirrors> ... </mirrors> -->

</profile>  
     <profile>
      <id>redstar-nexus</id>
      <repositories>
        <repository>
          <id>central</id>
          <url>http://nexus.******.com/nexus/content/groups/public/</url>
          <releases><enabled>true</enabled></releases>
          <snapshots><enabled>true</enabled></snapshots>
          <updatePolicy>always</updatePolicy>

        </repository>
      </repositories>
      <pluginRepositories>
        <pluginRepository>
          <id>central</id>
          <url>http://nexus.******.com/nexus/content/groups/public/</url>
          <releases><enabled>true</enabled></releases>
          <snapshots><enabled>true</enabled></snapshots>
          <updatePolicy>always</updatePolicy>
        </pluginRepository>
      </pluginRepositories>
</profile>

<activeProfiles>
    <activeProfile>redstar-nexus</activeProfile>
</activeProfiles>

项目中有相关pom.xml引入的jar配置：

<!-- 引入父jar包 -->
<parent>
    <artifactId>parent</artifactId>
    <groupId>com.*****</groupId>
    <version>1.3.0.RELEASE</version>
</parent>

<!-- 引入服务的snapshot包-->
<dependencies>
  <dependency>
    <groupId>com.*******</groupId>
    <artifactId>show-tools</artifactId>
    <version>1.0.2-SNAPSHOT</version>
  </dependency>
</dependencies>

这样只解决了仓库引入的问题。snapshot的jar引入依然没有解决。 
但是mirror的配置，只对release有效，对于snapshot无效的。所以我们添加个对snapshot有效的：

<mirrors>
    <mirror>
        <id>private-mirror</id>
        <mirrorOf>*</mirrorOf>
        <name>private-mirror</name>
        <url>http://nexus.corp.rs.com/nexus/content/groups/public/</url>
    </mirror>

    <mirror>
        <id>private-snapshots</id>
        <url>http://nexus.****.com/nexus/content/repositories/snapshots/</url>
        <mirrorOf>public-snapshots</mirrorOf>
    </mirror>
</mirrors>

<profile>
    <id>public-snapshots</id>
    <repositories>  
        <repository>
            <id>nexus_snapshot_repository</id>
            <releases>
                <enabled>false</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
            <url>http://nexus.*****.com/nexus/content/repositories/snapshots/</url>
            <layout>default</layout>
        </repository>

    </repositories>

    <pluginRepositories>
        <pluginRepository>
          <id>central</id>
          <url>http://nexus.*****.com/nexus/content/groups/public/</url>
          <releases><enabled>true</enabled></releases>
          <snapshots><enabled>true</enabled></snapshots>
          <updatePolicy>always</updatePolicy>
        </pluginRepository>
    </pluginRepositories>

</profile>

<activeProfiles>
    <activeProfile>public-snapshots</activeProfile>
</activeProfiles>

问题解决。这个配置的有些繁琐的，应该有更方便的方式。后续更新优化的。

snapshot的出现是解决release版本有变动要升级，在开发过程中造成频繁升级的问题的。maven会自动从仓库中检查引入服务的snapshot版本的最新版本，发现有要更新的时候进行下载的。默认每天一更新。通过updatePolicy控制（默认值是daily，表示Maven每天检查一次。其他可用的值包括：never-从不检查更新；always-每次构建都检查更新；interval：X-每隔X分钟检查一次更新（X为任意整数））
	
maven常量：
	${basedir} 项目根目录 
	${version}表示项目版本;
	${project.basedir}同${basedir};
	${project.version}表示项目版本,与${version}相同;
	${project.build.directory} 构建目录，缺省为target
	${project.build.sourceEncoding}表示主源码的编码格式;
	${project.build.sourceDirectory}表示主源码路径;
	${project.build.finalName}表示输出文件名称;
	${project.build.outputDirectory} 构建过程输出目录，缺省为target/classes


依赖项的作用域
在定义项目的依赖项的时候，我们可以通过scope来指定该依赖项的作用范围。scope的取值有compile、runtime、test、provided、system和import。
compile：这是依赖项的默认作用范围，即当没有指定依赖项的scope时默认使用compile。compile范围内的依赖项在所有情况下都是有效的，包括运行、测试和编译时。
runtime：表示该依赖项只有在运行时才是需要的，在编译的时候不需要。这种类型的依赖项将在运行和test的类路径下可以访问。
test：表示该依赖项只对测试时有用，包括测试代码的编译和运行，对于正常的项目运行是没有影响的。
provided：表示该依赖项将由JDK或者运行容器在运行时提供，也就是说由Maven提供的该依赖项我们只有在编译和测试时才会用到，
         而在运行时将由JDK或者运行容器提供。
system：当scope为system时，表示该依赖项是我们自己提供的，不需要Maven到仓库里面去找。指定scope为system需要与另一个属性元素systemPath一起使用，
        它表示该依赖项在当前系统的位置，使用的是绝对路径。
	
	
	
	
	
	
	
	
